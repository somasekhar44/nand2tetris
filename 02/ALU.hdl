// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
   // Put you code here:
       /* Implementation1 : requires our custom chips like Expan16 and Xor16*/
       
       Not(in=zx , out=notzx);
        Expand16(in=notzx , out=notzx16);
        And16(a=x , b=notzx16 , out=x1);
        Expand16(in=nx , out=nx16);
        Xor16(a=x1 , b=nx16 , out = x2);
        
        Not(in=zy , out=notzy);
        Expand16(in=notzy , out=notzy16);
        And16(a=y , b=notzy16 , out=y1);
        Expand16(in=ny , out=ny16);
        Xor16(a=y1 , b=ny16 , out =y2);

        Add16(a=x2 , b=y2 , out=addvalue);
        And16(a=x2 , b=y2 , out=andvalue);
        
        Mux16(a=andvalue , b=addvalue , sel=f , out=preout);
        Expand16(in=no , out=no16);
        
        Xor16(a=preout , b=no16 , out=out1);
        
        Or16Way(a=out1,out=notzr);
        Not(in=notzr , out=zr);
        
        And16(a=out1 , b=out1 , out[15]=ng);
        And16(a=out1 , b=out1 , out=out);

       /* 
        And16(a[0..15]=false , b=x , out=zerodx);
        Mux16(a=x , b=zerodx , sel=zx , out=x1);
        
        Not16(in=x1 , out=notx);
        Mux16(a=x1 , b=notx , sel=nx , out=x2);

        And16(a[0..15]=false , b=y , out=zerody);
        Mux16(a=y , b=zerody , sel=zy , out=y1);
        
        Not16(in=y1 , out=noty);
        Mux16(a=y1 , b=noty , sel=ny , out=y2);
        
        And16(a=x2 , b=y2 , out=andxy);
        Add16(a=x2 , b=y2 , out=addxy);
        Mux16(a=addxy , b=andxy , sel=f , out=preout);
        
        Not16(in=preout , out=notpreout);
        Mux16(a=preout , b=notpreout , sel=no , out=out1 , out[15] = ng , out=out);
        
        Or16Way(a=out1,out=notzr);
        Not(in=notzr , out=zr);
	*/

}